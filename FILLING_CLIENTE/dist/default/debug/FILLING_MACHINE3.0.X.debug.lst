

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Jul 15 20:48:37 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23   000000                     
    24                           ; Generated 23/03/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58   000000                     _PORTDbits	set	3971
    59   000000                     _TRISDbits	set	3989
    60   000000                     _ADCON1bits	set	4033
    61   000000                     _LATDbits	set	3980
    62                           
    63                           	psect	smallconst
    64   000800                     __psmallconst:
    65                           	callstack 0
    66   000800  00                 	db	0
    67   000801                     STR_1:
    68   000801  54                 	db	84	;'T'
    69   000802  65                 	db	101	;'e'
    70   000803  63                 	db	99	;'c'
    71   000804  6C                 	db	108	;'l'
    72   000805  61                 	db	97	;'a'
    73   000806  3A                 	db	58	;':'
    74   000807  20                 	db	32
    75   000808  00                 	db	0
    76   000809  00                 	db	0	; dummy byte at the end
    77   000000                     
    78                           ; #config settings
    79                           
    80                           	psect	cinit
    81   000E0C                     __pcinit:
    82                           	callstack 0
    83   000E0C                     start_initialization:
    84                           	callstack 0
    85   000E0C                     __initialization:
    86                           	callstack 0
    87                           
    88                           ; Clear objects allocated to COMRAM (1 bytes)
    89   000E0C  6A0B               	clrf	__pbssCOMRAM& (0+255),c
    90   000E0E                     end_of_initialization:
    91                           	callstack 0
    92   000E0E                     __end_of__initialization:
    93                           	callstack 0
    94   000E0E  0E00               	movlw	low (__Lmediumconst shr (0+16))
    95   000E10  6EF8               	movwf	tblptru,c
    96   000E12  0100               	movlb	0
    97   000E14  EF46  F006         	goto	_main	;jump to C main() function
    98                           
    99                           	psect	bssCOMRAM
   100   00000B                     __pbssCOMRAM:
   101                           	callstack 0
   102   00000B                     _tecla:
   103                           	callstack 0
   104   00000B                     	ds	1
   105                           
   106                           	psect	cstackCOMRAM
   107   000001                     __pcstackCOMRAM:
   108                           	callstack 0
   109   000001                     ??_Keypad_Get_Char:
   110   000001                     Lcd_Port@a:
   111                           	callstack 0
   112                           
   113                           ; 1 bytes @ 0x0
   114   000001                     	ds	1
   115   000002                     ??_Lcd_Cmd:
   116   000002                     Lcd_Write_Char@temp:
   117                           	callstack 0
   118                           
   119                           ; 1 bytes @ 0x1
   120   000002                     	ds	1
   121   000003                     Lcd_Cmd@a:
   122                           	callstack 0
   123   000003                     Lcd_Write_Char@y:
   124                           	callstack 0
   125                           
   126                           ; 1 bytes @ 0x2
   127   000003                     	ds	1
   128   000004                     ??_Lcd_Init:
   129   000004                     Lcd_Set_Cursor@b:
   130                           	callstack 0
   131   000004                     Lcd_Write_Char@a:
   132                           	callstack 0
   133                           
   134                           ; 1 bytes @ 0x3
   135   000004                     	ds	1
   136   000005                     Lcd_Set_Cursor@a:
   137                           	callstack 0
   138   000005                     Lcd_Write_String@a:
   139                           	callstack 0
   140                           
   141                           ; 2 bytes @ 0x4
   142   000005                     	ds	1
   143   000006                     Lcd_Set_Cursor@z:
   144                           	callstack 0
   145                           
   146                           ; 1 bytes @ 0x5
   147   000006                     	ds	1
   148   000007                     ??_Lcd_Write_String:
   149   000007                     Lcd_Set_Cursor@y:
   150                           	callstack 0
   151                           
   152                           ; 1 bytes @ 0x6
   153   000007                     	ds	1
   154   000008                     Lcd_Set_Cursor@temp:
   155                           	callstack 0
   156                           
   157                           ; 1 bytes @ 0x7
   158   000008                     	ds	1
   159   000009                     Lcd_Write_String@i:
   160                           	callstack 0
   161                           
   162                           ; 2 bytes @ 0x8
   163   000009                     	ds	2
   164   00000B                     
   165                           ; 1 bytes @ 0xA
   166 ;;
   167 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   168 ;;
   169 ;; *************** function _main *****************
   170 ;; Defined at:
   171 ;;		line 71 in file "Main_program.c"
   172 ;; Parameters:    Size  Location     Type
   173 ;;		None
   174 ;; Auto vars:     Size  Location     Type
   175 ;;		None
   176 ;; Return value:  Size  Location     Type
   177 ;;                  1    wreg      void 
   178 ;; Registers used:
   179 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   180 ;; Tracked objects:
   181 ;;		On entry : 0/0
   182 ;;		On exit  : 0/0
   183 ;;		Unchanged: 0/0
   184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   185 ;;      Params:         0       0       0       0       0       0       0       0       0
   186 ;;      Locals:         0       0       0       0       0       0       0       0       0
   187 ;;      Temps:          0       0       0       0       0       0       0       0       0
   188 ;;      Totals:         0       0       0       0       0       0       0       0       0
   189 ;;Total ram usage:        0 bytes
   190 ;; Hardware stack levels required when called: 4
   191 ;; This function calls:
   192 ;;		_Keypad_Get_Char
   193 ;;		_Keypad_Init
   194 ;;		_Lcd_Init
   195 ;;		_Lcd_Set_Cursor
   196 ;;		_Lcd_Write_Char
   197 ;;		_Lcd_Write_String
   198 ;; This function is called by:
   199 ;;		Startup code after reset
   200 ;; This function uses a non-reentrant model
   201 ;;
   202                           
   203                           	psect	text0
   204   000C8C                     __ptext0:
   205                           	callstack 0
   206   000C8C                     _main:
   207                           	callstack 27
   208   000C8C                     
   209                           ;Main_program.c: 73:     ADCON1bits.PCFG = 0x0F;
   210   000C8C  0E0F               	movlw	15
   211   000C8E  12C1               	iorwf	193,f,c	;volatile
   212   000C90                     
   213                           ;Main_program.c: 74:     Keypad_Init();
   214   000C90  ECF7  F006         	call	_Keypad_Init	;wreg free
   215                           
   216                           ;Main_program.c: 75:     Lcd_Init();
   217   000C94  EC00  F006         	call	_Lcd_Init	;wreg free
   218   000C98                     
   219                           ;Main_program.c: 77:     Lcd_Set_Cursor(1,1);
   220   000C98  0E01               	movlw	1
   221   000C9A  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   222   000C9C  0E01               	movlw	1
   223   000C9E  EC97  F005         	call	_Lcd_Set_Cursor
   224   000CA2                     
   225                           ;Main_program.c: 78:     Lcd_Write_String("Tecla: ");
   226   000CA2  0E01               	movlw	low STR_1
   227   000CA4  6E05               	movwf	Lcd_Write_String@a^0,c
   228   000CA6  0E08               	movlw	high STR_1
   229   000CA8  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   230   000CAA  ECA2  F006         	call	_Lcd_Write_String	;wreg free
   231   000CAE                     l1245:
   232                           
   233                           ;Main_program.c: 81:     {;Main_program.c: 82:         tecla = Keypad_Get_Char();
   234   000CAE  EC05  F004         	call	_Keypad_Get_Char	;wreg free
   235   000CB2  6E0B               	movwf	_tecla^0,c
   236   000CB4                     
   237                           ;Main_program.c: 83:         if(tecla != 0)
   238   000CB4  500B               	movf	_tecla^0,w,c
   239   000CB6  B4D8               	btfsc	status,2,c
   240   000CB8  EF60  F006         	goto	u481
   241   000CBC  EF62  F006         	goto	u480
   242   000CC0                     u481:
   243   000CC0  EF57  F006         	goto	l1245
   244   000CC4                     u480:
   245   000CC4                     
   246                           ;Main_program.c: 84:         {;Main_program.c: 85:             Lcd_Set_Cursor(1,1);
   247   000CC4  0E01               	movlw	1
   248   000CC6  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   249   000CC8  0E01               	movlw	1
   250   000CCA  EC97  F005         	call	_Lcd_Set_Cursor
   251   000CCE                     
   252                           ;Main_program.c: 86:             Lcd_Write_String("Tecla: ");
   253   000CCE  0E01               	movlw	low STR_1
   254   000CD0  6E05               	movwf	Lcd_Write_String@a^0,c
   255   000CD2  0E08               	movlw	high STR_1
   256   000CD4  6E06               	movwf	(Lcd_Write_String@a+1)^0,c
   257   000CD6  ECA2  F006         	call	_Lcd_Write_String	;wreg free
   258   000CDA                     
   259                           ;Main_program.c: 87:             Lcd_Write_Char(tecla);
   260   000CDA  500B               	movf	_tecla^0,w,c
   261   000CDC  ECCD  F006         	call	_Lcd_Write_Char
   262   000CE0  EF57  F006         	goto	l1245
   263   000CE4  EF00  F000         	goto	start
   264   000CE8                     __end_of_main:
   265                           	callstack 0
   266                           
   267 ;; *************** function _Lcd_Write_String *****************
   268 ;; Defined at:
   269 ;;		line 104 in file "lcd.c"
   270 ;; Parameters:    Size  Location     Type
   271 ;;  a               2    4[COMRAM] PTR const unsigned char 
   272 ;;		 -> STR_2(8), STR_1(8), 
   273 ;; Auto vars:     Size  Location     Type
   274 ;;  i               2    8[COMRAM] int 
   275 ;; Return value:  Size  Location     Type
   276 ;;                  1    wreg      void 
   277 ;; Registers used:
   278 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   279 ;; Tracked objects:
   280 ;;		On entry : 0/0
   281 ;;		On exit  : 0/0
   282 ;;		Unchanged: 0/0
   283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   284 ;;      Params:         2       0       0       0       0       0       0       0       0
   285 ;;      Locals:         2       0       0       0       0       0       0       0       0
   286 ;;      Temps:          2       0       0       0       0       0       0       0       0
   287 ;;      Totals:         6       0       0       0       0       0       0       0       0
   288 ;;Total ram usage:        6 bytes
   289 ;; Hardware stack levels used: 1
   290 ;; Hardware stack levels required when called: 2
   291 ;; This function calls:
   292 ;;		_Lcd_Write_Char
   293 ;; This function is called by:
   294 ;;		_main
   295 ;; This function uses a non-reentrant model
   296 ;;
   297                           
   298                           	psect	text1
   299   000D44                     __ptext1:
   300                           	callstack 0
   301   000D44                     _Lcd_Write_String:
   302                           	callstack 28
   303   000D44                     
   304                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
   305   000D44  0E00               	movlw	0
   306   000D46  6E0A               	movwf	(Lcd_Write_String@i+1)^0,c
   307   000D48  0E00               	movlw	0
   308   000D4A  6E09               	movwf	Lcd_Write_String@i^0,c
   309   000D4C  EFB8  F006         	goto	l1235
   310   000D50                     l1231:
   311                           
   312                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
   313   000D50  5009               	movf	Lcd_Write_String@i^0,w,c
   314   000D52  2405               	addwf	Lcd_Write_String@a^0,w,c
   315   000D54  6E07               	movwf	??_Lcd_Write_String^0,c
   316   000D56  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
   317   000D58  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
   318   000D5A  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
   319   000D5C  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   320   000D60  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   321   000D64                     	if	0	;tblptru may be non-zero
   322   000D64                     	endif
   323   000D64                     	if	0	;tblptru may be non-zero
   324   000D64                     	endif
   325   000D64  0008               	tblrd		*
   326   000D66  50F5               	movf	tablat,w,c
   327   000D68  ECCD  F006         	call	_Lcd_Write_Char
   328   000D6C  4A09               	infsnz	Lcd_Write_String@i^0,f,c
   329   000D6E  2A0A               	incf	(Lcd_Write_String@i+1)^0,f,c
   330   000D70                     l1235:
   331   000D70  5009               	movf	Lcd_Write_String@i^0,w,c
   332   000D72  2405               	addwf	Lcd_Write_String@a^0,w,c
   333   000D74  6E07               	movwf	??_Lcd_Write_String^0,c
   334   000D76  500A               	movf	(Lcd_Write_String@i+1)^0,w,c
   335   000D78  2006               	addwfc	(Lcd_Write_String@a+1)^0,w,c
   336   000D7A  6E08               	movwf	(??_Lcd_Write_String+1)^0,c
   337   000D7C  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   338   000D80  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   339   000D84                     	if	0	;tblptru may be non-zero
   340   000D84                     	endif
   341   000D84                     	if	0	;tblptru may be non-zero
   342   000D84                     	endif
   343   000D84  0008               	tblrd		*
   344   000D86  50F5               	movf	tablat,w,c
   345   000D88  0900               	iorlw	0
   346   000D8A  A4D8               	btfss	status,2,c
   347   000D8C  EFCA  F006         	goto	u471
   348   000D90  EFCC  F006         	goto	u470
   349   000D94                     u471:
   350   000D94  EFA8  F006         	goto	l1231
   351   000D98                     u470:
   352   000D98  0012               	return		;funcret
   353   000D9A                     __end_of_Lcd_Write_String:
   354                           	callstack 0
   355                           
   356 ;; *************** function _Lcd_Write_Char *****************
   357 ;; Defined at:
   358 ;;		line 88 in file "lcd.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;  a               1    wreg     unsigned char 
   361 ;; Auto vars:     Size  Location     Type
   362 ;;  a               1    3[COMRAM] unsigned char 
   363 ;;  y               1    2[COMRAM] unsigned char 
   364 ;;  temp            1    1[COMRAM] unsigned char 
   365 ;; Return value:  Size  Location     Type
   366 ;;                  1    wreg      void 
   367 ;; Registers used:
   368 ;;		wreg, status,2, status,0, cstack
   369 ;; Tracked objects:
   370 ;;		On entry : 0/0
   371 ;;		On exit  : 0/0
   372 ;;		Unchanged: 0/0
   373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   374 ;;      Params:         0       0       0       0       0       0       0       0       0
   375 ;;      Locals:         3       0       0       0       0       0       0       0       0
   376 ;;      Temps:          0       0       0       0       0       0       0       0       0
   377 ;;      Totals:         3       0       0       0       0       0       0       0       0
   378 ;;Total ram usage:        3 bytes
   379 ;; Hardware stack levels used: 1
   380 ;; Hardware stack levels required when called: 1
   381 ;; This function calls:
   382 ;;		_Lcd_Port
   383 ;; This function is called by:
   384 ;;		_main
   385 ;;		_Lcd_Write_String
   386 ;;		_Lcd_CGRAM_CreateChar
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text2
   391   000D9A                     __ptext2:
   392                           	callstack 0
   393   000D9A                     _Lcd_Write_Char:
   394                           	callstack 28
   395                           
   396                           ;incstack = 0
   397                           ;Lcd_Write_Char@a stored from wreg
   398   000D9A  6E04               	movwf	Lcd_Write_Char@a^0,c
   399   000D9C                     
   400                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
   401   000D9C  5004               	movf	Lcd_Write_Char@a^0,w,c
   402   000D9E  0B0F               	andlw	15
   403   000DA0  6E02               	movwf	Lcd_Write_Char@temp^0,c
   404                           
   405                           ;lcd.c: 92:     y = a&0xF0;
   406   000DA2  5004               	movf	Lcd_Write_Char@a^0,w,c
   407   000DA4  0BF0               	andlw	240
   408   000DA6  6E03               	movwf	Lcd_Write_Char@y^0,c
   409   000DA8                     
   410                           ;lcd.c: 93:     LATDbits.LD2 = 1;
   411   000DA8  848C               	bsf	140,2,c	;volatile
   412   000DAA                     
   413                           ;lcd.c: 94:     Lcd_Port(y>>4);
   414   000DAA  3803               	swapf	Lcd_Write_Char@y^0,w,c
   415   000DAC  0B0F               	andlw	15
   416   000DAE  EC74  F006         	call	_Lcd_Port
   417   000DB2                     
   418                           ;lcd.c: 95:     LATDbits.LD3 = 1;
   419   000DB2  868C               	bsf	140,3,c	;volatile
   420   000DB4                     
   421                           ;lcd.c: 96:     _delay((unsigned long)((40)*(48000000/4000000.0)));
   422   000DB4  0EA0               	movlw	160
   423   000DB6                     u497:
   424   000DB6  2EE8               	decfsz	wreg,f,c
   425   000DB8  D7FE               	bra	u497
   426   000DBA                     
   427                           ;lcd.c: 97:     LATDbits.LD3 = 0;
   428   000DBA  968C               	bcf	140,3,c	;volatile
   429   000DBC                     
   430                           ;lcd.c: 98:     Lcd_Port(temp);
   431   000DBC  5002               	movf	Lcd_Write_Char@temp^0,w,c
   432   000DBE  EC74  F006         	call	_Lcd_Port
   433   000DC2                     
   434                           ;lcd.c: 99:     LATDbits.LD3 = 1;
   435   000DC2  868C               	bsf	140,3,c	;volatile
   436   000DC4                     
   437                           ;lcd.c: 100:     _delay((unsigned long)((40)*(48000000/4000000.0)));
   438   000DC4  0EA0               	movlw	160
   439   000DC6                     u507:
   440   000DC6  2EE8               	decfsz	wreg,f,c
   441   000DC8  D7FE               	bra	u507
   442   000DCA                     
   443                           ;lcd.c: 101:     LATDbits.LD3 = 0;
   444   000DCA  968C               	bcf	140,3,c	;volatile
   445   000DCC  0012               	return		;funcret
   446   000DCE                     __end_of_Lcd_Write_Char:
   447                           	callstack 0
   448                           
   449 ;; *************** function _Lcd_Set_Cursor *****************
   450 ;; Defined at:
   451 ;;		line 26 in file "lcd.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;  a               1    wreg     unsigned char 
   454 ;;  b               1    3[COMRAM] unsigned char 
   455 ;; Auto vars:     Size  Location     Type
   456 ;;  a               1    4[COMRAM] unsigned char 
   457 ;;  temp            1    7[COMRAM] unsigned char 
   458 ;;  y               1    6[COMRAM] unsigned char 
   459 ;;  z               1    5[COMRAM] unsigned char 
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, status,2, status,0, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   469 ;;      Params:         1       0       0       0       0       0       0       0       0
   470 ;;      Locals:         4       0       0       0       0       0       0       0       0
   471 ;;      Temps:          0       0       0       0       0       0       0       0       0
   472 ;;      Totals:         5       0       0       0       0       0       0       0       0
   473 ;;Total ram usage:        5 bytes
   474 ;; Hardware stack levels used: 1
   475 ;; Hardware stack levels required when called: 2
   476 ;; This function calls:
   477 ;;		_Lcd_Cmd
   478 ;; This function is called by:
   479 ;;		_main
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           	psect	text3
   484   000B2E                     __ptext3:
   485                           	callstack 0
   486   000B2E                     _Lcd_Set_Cursor:
   487                           	callstack 28
   488                           
   489                           ;incstack = 0
   490                           ;Lcd_Set_Cursor@a stored from wreg
   491   000B2E  6E05               	movwf	Lcd_Set_Cursor@a^0,c
   492   000B30                     
   493                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
   494   000B30  0405               	decf	Lcd_Set_Cursor@a^0,w,c
   495   000B32  A4D8               	btfss	status,2,c
   496   000B34  EF9E  F005         	goto	u431
   497   000B38  EFA0  F005         	goto	u430
   498   000B3C                     u431:
   499   000B3C  EFB1  F005         	goto	l1205
   500   000B40                     u430:
   501   000B40                     
   502                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
   503   000B40  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   504   000B42  0F7F               	addlw	127
   505   000B44  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   506                           
   507                           ;lcd.c: 32:         z = temp>>4;
   508   000B46  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   509   000B48  0B0F               	andlw	15
   510   000B4A  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   511                           
   512                           ;lcd.c: 33:         y = temp & 0x0F;
   513   000B4C  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   514   000B4E  0B0F               	andlw	15
   515   000B50  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   516   000B52                     
   517                           ;lcd.c: 34:         Lcd_Cmd(z);
   518   000B52  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   519   000B54  ECE7  F006         	call	_Lcd_Cmd
   520   000B58                     
   521                           ;lcd.c: 35:         Lcd_Cmd(y);
   522   000B58  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   523   000B5A  ECE7  F006         	call	_Lcd_Cmd
   524                           
   525                           ;lcd.c: 36:     }
   526   000B5E  EFFF  F005         	goto	l126
   527   000B62                     l1205:
   528   000B62  0E02               	movlw	2
   529   000B64  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   530   000B66  A4D8               	btfss	status,2,c
   531   000B68  EFB8  F005         	goto	u441
   532   000B6C  EFBA  F005         	goto	u440
   533   000B70                     u441:
   534   000B70  EFCB  F005         	goto	l1213
   535   000B74                     u440:
   536   000B74                     
   537                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
   538   000B74  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   539   000B76  0FBF               	addlw	191
   540   000B78  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   541                           
   542                           ;lcd.c: 40:         z = temp>>4;
   543   000B7A  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   544   000B7C  0B0F               	andlw	15
   545   000B7E  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   546                           
   547                           ;lcd.c: 41:         y = temp & 0x0F;
   548   000B80  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   549   000B82  0B0F               	andlw	15
   550   000B84  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   551   000B86                     
   552                           ;lcd.c: 42:         Lcd_Cmd(z);
   553   000B86  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   554   000B88  ECE7  F006         	call	_Lcd_Cmd
   555   000B8C                     
   556                           ;lcd.c: 43:         Lcd_Cmd(y);
   557   000B8C  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   558   000B8E  ECE7  F006         	call	_Lcd_Cmd
   559                           
   560                           ;lcd.c: 44:     }
   561   000B92  EFFF  F005         	goto	l126
   562   000B96                     l1213:
   563   000B96  0E03               	movlw	3
   564   000B98  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   565   000B9A  A4D8               	btfss	status,2,c
   566   000B9C  EFD2  F005         	goto	u451
   567   000BA0  EFD4  F005         	goto	u450
   568   000BA4                     u451:
   569   000BA4  EFE5  F005         	goto	l1221
   570   000BA8                     u450:
   571   000BA8                     
   572                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
   573   000BA8  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   574   000BAA  0F93               	addlw	147
   575   000BAC  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   576                           
   577                           ;lcd.c: 48:         z = temp>>4;
   578   000BAE  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   579   000BB0  0B0F               	andlw	15
   580   000BB2  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   581                           
   582                           ;lcd.c: 49:         y = temp & 0x0F;
   583   000BB4  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   584   000BB6  0B0F               	andlw	15
   585   000BB8  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   586   000BBA                     
   587                           ;lcd.c: 50:         Lcd_Cmd(z);
   588   000BBA  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   589   000BBC  ECE7  F006         	call	_Lcd_Cmd
   590   000BC0                     
   591                           ;lcd.c: 51:         Lcd_Cmd(y);
   592   000BC0  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   593   000BC2  ECE7  F006         	call	_Lcd_Cmd
   594                           
   595                           ;lcd.c: 52:     }
   596   000BC6  EFFF  F005         	goto	l126
   597   000BCA                     l1221:
   598   000BCA  0E04               	movlw	4
   599   000BCC  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   600   000BCE  A4D8               	btfss	status,2,c
   601   000BD0  EFEC  F005         	goto	u461
   602   000BD4  EFEE  F005         	goto	u460
   603   000BD8                     u461:
   604   000BD8  EFFF  F005         	goto	l122
   605   000BDC                     u460:
   606   000BDC                     
   607                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
   608   000BDC  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   609   000BDE  0FD3               	addlw	211
   610   000BE0  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   611                           
   612                           ;lcd.c: 56:         z = temp>>4;
   613   000BE2  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   614   000BE4  0B0F               	andlw	15
   615   000BE6  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   616                           
   617                           ;lcd.c: 57:         y = temp & 0x0F;
   618   000BE8  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   619   000BEA  0B0F               	andlw	15
   620   000BEC  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   621   000BEE                     
   622                           ;lcd.c: 58:         Lcd_Cmd(z);
   623   000BEE  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   624   000BF0  ECE7  F006         	call	_Lcd_Cmd
   625   000BF4                     
   626                           ;lcd.c: 59:         Lcd_Cmd(y);
   627   000BF4  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   628   000BF6  ECE7  F006         	call	_Lcd_Cmd
   629   000BFA  EFFF  F005         	goto	l126
   630   000BFE                     l122:
   631   000BFE                     l126:
   632   000BFE  0012               	return		;funcret
   633   000C00                     __end_of_Lcd_Set_Cursor:
   634                           	callstack 0
   635                           
   636 ;; *************** function _Lcd_Init *****************
   637 ;; Defined at:
   638 ;;		line 63 in file "lcd.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;		None
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, status,2, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   652 ;;      Params:         0       0       0       0       0       0       0       0       0
   653 ;;      Locals:         0       0       0       0       0       0       0       0       0
   654 ;;      Temps:          2       0       0       0       0       0       0       0       0
   655 ;;      Totals:         2       0       0       0       0       0       0       0       0
   656 ;;Total ram usage:        2 bytes
   657 ;; Hardware stack levels used: 1
   658 ;; Hardware stack levels required when called: 3
   659 ;; This function calls:
   660 ;;		_Lcd_Clear
   661 ;;		_Lcd_Cmd
   662 ;;		_Lcd_Port
   663 ;; This function is called by:
   664 ;;		_main
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text4
   669   000C00                     __ptext4:
   670                           	callstack 0
   671   000C00                     _Lcd_Init:
   672                           	callstack 27
   673   000C00                     
   674                           ;lcd.c: 65:  TRISDbits.TRISD2 = 0;
   675   000C00  9495               	bcf	149,2,c	;volatile
   676                           
   677                           ;lcd.c: 66:  TRISDbits.TRISD3 = 0;
   678   000C02  9695               	bcf	149,3,c	;volatile
   679                           
   680                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
   681   000C04  9895               	bcf	149,4,c	;volatile
   682                           
   683                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
   684   000C06  9A95               	bcf	149,5,c	;volatile
   685                           
   686                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
   687   000C08  9C95               	bcf	149,6,c	;volatile
   688                           
   689                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
   690   000C0A  9E95               	bcf	149,7,c	;volatile
   691   000C0C                     
   692                           ;lcd.c: 71:     Lcd_Port(0x00);
   693   000C0C  0E00               	movlw	0
   694   000C0E  EC74  F006         	call	_Lcd_Port
   695   000C12                     
   696                           ;lcd.c: 72:     _delay((unsigned long)((20)*(48000000/4000.0)));
   697   000C12  0E02               	movlw	2
   698   000C14  6E05               	movwf	(??_Lcd_Init+1)^0,c
   699   000C16  0E38               	movlw	56
   700   000C18  6E04               	movwf	??_Lcd_Init^0,c
   701   000C1A  0EAD               	movlw	173
   702   000C1C                     u517:
   703   000C1C  2EE8               	decfsz	wreg,f,c
   704   000C1E  D7FE               	bra	u517
   705   000C20  2E04               	decfsz	??_Lcd_Init^0,f,c
   706   000C22  D7FC               	bra	u517
   707   000C24  2E05               	decfsz	(??_Lcd_Init+1)^0,f,c
   708   000C26  D7FA               	bra	u517
   709   000C28  F000               	nop	
   710   000C2A                     
   711                           ;lcd.c: 73:     Lcd_Cmd(0x03);
   712   000C2A  0E03               	movlw	3
   713   000C2C  ECE7  F006         	call	_Lcd_Cmd
   714   000C30                     
   715                           ;lcd.c: 74:     _delay((unsigned long)((5)*(48000000/4000.0)));
   716   000C30  0E4E               	movlw	78
   717   000C32  6E04               	movwf	??_Lcd_Init^0,c
   718   000C34  0EEB               	movlw	235
   719   000C36                     u527:
   720   000C36  2EE8               	decfsz	wreg,f,c
   721   000C38  D7FE               	bra	u527
   722   000C3A  2E04               	decfsz	??_Lcd_Init^0,f,c
   723   000C3C  D7FC               	bra	u527
   724   000C3E  F000               	nop	
   725   000C40                     
   726                           ;lcd.c: 75:     Lcd_Cmd(0x03);
   727   000C40  0E03               	movlw	3
   728   000C42  ECE7  F006         	call	_Lcd_Cmd
   729   000C46                     
   730                           ;lcd.c: 76:     _delay((unsigned long)((11)*(48000000/4000.0)));
   731   000C46  0EAC               	movlw	172
   732   000C48  6E04               	movwf	??_Lcd_Init^0,c
   733   000C4A  0E6C               	movlw	108
   734   000C4C                     u537:
   735   000C4C  2EE8               	decfsz	wreg,f,c
   736   000C4E  D7FE               	bra	u537
   737   000C50  2E04               	decfsz	??_Lcd_Init^0,f,c
   738   000C52  D7FC               	bra	u537
   739   000C54  D000               	nop2	
   740   000C56                     
   741                           ;lcd.c: 77:     Lcd_Cmd(0x03);
   742   000C56  0E03               	movlw	3
   743   000C58  ECE7  F006         	call	_Lcd_Cmd
   744   000C5C                     
   745                           ;lcd.c: 78:     Lcd_Cmd(0x02);
   746   000C5C  0E02               	movlw	2
   747   000C5E  ECE7  F006         	call	_Lcd_Cmd
   748   000C62                     
   749                           ;lcd.c: 79:     Lcd_Cmd(0x02);
   750   000C62  0E02               	movlw	2
   751   000C64  ECE7  F006         	call	_Lcd_Cmd
   752   000C68                     
   753                           ;lcd.c: 80:     Lcd_Cmd(0x08);
   754   000C68  0E08               	movlw	8
   755   000C6A  ECE7  F006         	call	_Lcd_Cmd
   756   000C6E                     
   757                           ;lcd.c: 81:     Lcd_Cmd(0x00);
   758   000C6E  0E00               	movlw	0
   759   000C70  ECE7  F006         	call	_Lcd_Cmd
   760   000C74                     
   761                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
   762   000C74  0E0C               	movlw	12
   763   000C76  ECE7  F006         	call	_Lcd_Cmd
   764   000C7A                     
   765                           ;lcd.c: 83:     Lcd_Cmd(0x00);
   766   000C7A  0E00               	movlw	0
   767   000C7C  ECE7  F006         	call	_Lcd_Cmd
   768   000C80                     
   769                           ;lcd.c: 84:     Lcd_Cmd(0x06);
   770   000C80  0E06               	movlw	6
   771   000C82  ECE7  F006         	call	_Lcd_Cmd
   772   000C86                     
   773                           ;lcd.c: 85:     Lcd_Clear();
   774   000C86  ECFF  F006         	call	_Lcd_Clear	;wreg free
   775   000C8A  0012               	return		;funcret
   776   000C8C                     __end_of_Lcd_Init:
   777                           	callstack 0
   778                           
   779 ;; *************** function _Lcd_Clear *****************
   780 ;; Defined at:
   781 ;;		line 20 in file "lcd.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, status,2, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   795 ;;      Params:         0       0       0       0       0       0       0       0       0
   796 ;;      Locals:         0       0       0       0       0       0       0       0       0
   797 ;;      Temps:          0       0       0       0       0       0       0       0       0
   798 ;;      Totals:         0       0       0       0       0       0       0       0       0
   799 ;;Total ram usage:        0 bytes
   800 ;; Hardware stack levels used: 1
   801 ;; Hardware stack levels required when called: 2
   802 ;; This function calls:
   803 ;;		_Lcd_Cmd
   804 ;; This function is called by:
   805 ;;		_Lcd_Init
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text5
   810   000DFE                     __ptext5:
   811                           	callstack 0
   812   000DFE                     _Lcd_Clear:
   813                           	callstack 27
   814   000DFE                     
   815                           ;lcd.c: 22:     Lcd_Cmd(0);
   816   000DFE  0E00               	movlw	0
   817   000E00  ECE7  F006         	call	_Lcd_Cmd
   818                           
   819                           ;lcd.c: 23:     Lcd_Cmd(1);
   820   000E04  0E01               	movlw	1
   821   000E06  ECE7  F006         	call	_Lcd_Cmd
   822   000E0A  0012               	return		;funcret
   823   000E0C                     __end_of_Lcd_Clear:
   824                           	callstack 0
   825                           
   826 ;; *************** function _Lcd_Cmd *****************
   827 ;; Defined at:
   828 ;;		line 11 in file "lcd.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  a               1    wreg     unsigned char 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  a               1    2[COMRAM] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, status,2, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   842 ;;      Params:         0       0       0       0       0       0       0       0       0
   843 ;;      Locals:         1       0       0       0       0       0       0       0       0
   844 ;;      Temps:          1       0       0       0       0       0       0       0       0
   845 ;;      Totals:         2       0       0       0       0       0       0       0       0
   846 ;;Total ram usage:        2 bytes
   847 ;; Hardware stack levels used: 1
   848 ;; Hardware stack levels required when called: 1
   849 ;; This function calls:
   850 ;;		_Lcd_Port
   851 ;; This function is called by:
   852 ;;		_Lcd_Clear
   853 ;;		_Lcd_Set_Cursor
   854 ;;		_Lcd_Init
   855 ;;		_Lcd_Shift_Right
   856 ;;		_Lcd_Shift_Left
   857 ;;		_Lcd_Blink
   858 ;;		_Lcd_NoBlink
   859 ;;		_Lcd_CGRAM_Init
   860 ;;		_Lcd_CGRAM_Close
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text6
   865   000DCE                     __ptext6:
   866                           	callstack 0
   867   000DCE                     _Lcd_Cmd:
   868                           	callstack 28
   869                           
   870                           ;incstack = 0
   871                           ;Lcd_Cmd@a stored from wreg
   872   000DCE  6E03               	movwf	Lcd_Cmd@a^0,c
   873   000DD0                     
   874                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATDbits.LD2 = 0;
   875   000DD0  948C               	bcf	140,2,c	;volatile
   876   000DD2                     
   877                           ;lcd.c: 14:     Lcd_Port(a);
   878   000DD2  5003               	movf	Lcd_Cmd@a^0,w,c
   879   000DD4  EC74  F006         	call	_Lcd_Port
   880   000DD8                     
   881                           ;lcd.c: 15:     LATDbits.LD3 = 1;
   882   000DD8  868C               	bsf	140,3,c	;volatile
   883   000DDA                     
   884                           ;lcd.c: 16:     _delay((unsigned long)((4)*(48000000/4000.0)));
   885   000DDA  0E3F               	movlw	63
   886   000DDC  6E02               	movwf	??_Lcd_Cmd^0,c
   887   000DDE  0E55               	movlw	85
   888   000DE0                     u547:
   889   000DE0  2EE8               	decfsz	wreg,f,c
   890   000DE2  D7FE               	bra	u547
   891   000DE4  2E02               	decfsz	??_Lcd_Cmd^0,f,c
   892   000DE6  D7FC               	bra	u547
   893   000DE8  F000               	nop	
   894   000DEA                     
   895                           ;lcd.c: 17:     LATDbits.LD3 = 0;
   896   000DEA  968C               	bcf	140,3,c	;volatile
   897   000DEC  0012               	return		;funcret
   898   000DEE                     __end_of_Lcd_Cmd:
   899                           	callstack 0
   900                           
   901 ;; *************** function _Lcd_Port *****************
   902 ;; Defined at:
   903 ;;		line 3 in file "lcd.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;  a               1    wreg     unsigned char 
   906 ;; Auto vars:     Size  Location     Type
   907 ;;  a               1    0[COMRAM] unsigned char 
   908 ;; Return value:  Size  Location     Type
   909 ;;                  1    wreg      void 
   910 ;; Registers used:
   911 ;;		wreg
   912 ;; Tracked objects:
   913 ;;		On entry : 0/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   917 ;;      Params:         0       0       0       0       0       0       0       0       0
   918 ;;      Locals:         1       0       0       0       0       0       0       0       0
   919 ;;      Temps:          0       0       0       0       0       0       0       0       0
   920 ;;      Totals:         1       0       0       0       0       0       0       0       0
   921 ;;Total ram usage:        1 bytes
   922 ;; Hardware stack levels used: 1
   923 ;; This function calls:
   924 ;;		Nothing
   925 ;; This function is called by:
   926 ;;		_Lcd_Cmd
   927 ;;		_Lcd_Init
   928 ;;		_Lcd_Write_Char
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text7
   933   000CE8                     __ptext7:
   934                           	callstack 0
   935   000CE8                     _Lcd_Port:
   936                           	callstack 28
   937                           
   938                           ;incstack = 0
   939                           ;Lcd_Port@a stored from wreg
   940   000CE8  6E01               	movwf	Lcd_Port@a^0,c
   941   000CEA                     
   942                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
   943   000CEA  A001               	btfss	Lcd_Port@a^0,0,c
   944   000CEC  EF7A  F006         	goto	u11
   945   000CF0  EF7C  F006         	goto	u10
   946   000CF4                     u11:
   947   000CF4  EF7F  F006         	goto	l95
   948   000CF8                     u10:
   949   000CF8  888C               	bsf	140,4,c	;volatile
   950   000CFA  EF80  F006         	goto	l865
   951   000CFE                     l95:
   952   000CFE  988C               	bcf	140,4,c	;volatile
   953   000D00                     l865:
   954                           
   955                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
   956   000D00  A201               	btfss	Lcd_Port@a^0,1,c
   957   000D02  EF85  F006         	goto	u21
   958   000D06  EF87  F006         	goto	u20
   959   000D0A                     u21:
   960   000D0A  EF8A  F006         	goto	l99
   961   000D0E                     u20:
   962   000D0E  8A8C               	bsf	140,5,c	;volatile
   963   000D10  EF8B  F006         	goto	l869
   964   000D14                     l99:
   965   000D14  9A8C               	bcf	140,5,c	;volatile
   966   000D16                     l869:
   967                           
   968                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
   969   000D16  A401               	btfss	Lcd_Port@a^0,2,c
   970   000D18  EF90  F006         	goto	u31
   971   000D1C  EF92  F006         	goto	u30
   972   000D20                     u31:
   973   000D20  EF95  F006         	goto	l103
   974   000D24                     u30:
   975   000D24  8C8C               	bsf	140,6,c	;volatile
   976   000D26  EF96  F006         	goto	l873
   977   000D2A                     l103:
   978   000D2A  9C8C               	bcf	140,6,c	;volatile
   979   000D2C                     l873:
   980                           
   981                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
   982   000D2C  A601               	btfss	Lcd_Port@a^0,3,c
   983   000D2E  EF9B  F006         	goto	u41
   984   000D32  EF9D  F006         	goto	u40
   985   000D36                     u41:
   986   000D36  EFA0  F006         	goto	l107
   987   000D3A                     u40:
   988   000D3A  8E8C               	bsf	140,7,c	;volatile
   989   000D3C  EFA1  F006         	goto	l110
   990   000D40                     l107:
   991   000D40  9E8C               	bcf	140,7,c	;volatile
   992   000D42                     l110:
   993   000D42  0012               	return		;funcret
   994   000D44                     __end_of_Lcd_Port:
   995                           	callstack 0
   996                           
   997 ;; *************** function _Keypad_Init *****************
   998 ;; Defined at:
   999 ;;		line 11 in file "kbd4x4.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;		None
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;		None
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		None
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1013 ;;      Params:         0       0       0       0       0       0       0       0       0
  1014 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1016 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1017 ;;Total ram usage:        0 bytes
  1018 ;; Hardware stack levels used: 1
  1019 ;; This function calls:
  1020 ;;		Nothing
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text8
  1027   000DEE                     __ptext8:
  1028                           	callstack 0
  1029   000DEE                     _Keypad_Init:
  1030                           	callstack 30
  1031   000DEE                     
  1032                           ;kbd4x4.c: 13:     TRISDbits.TRISD7 = 0;
  1033   000DEE  9E95               	bcf	149,7,c	;volatile
  1034                           
  1035                           ;kbd4x4.c: 14:     TRISDbits.TRISD6 = 0;
  1036   000DF0  9C95               	bcf	149,6,c	;volatile
  1037                           
  1038                           ;kbd4x4.c: 15:     TRISDbits.TRISD5 = 0;
  1039   000DF2  9A95               	bcf	149,5,c	;volatile
  1040                           
  1041                           ;kbd4x4.c: 16:     TRISDbits.TRISD4 = 0;
  1042   000DF4  9895               	bcf	149,4,c	;volatile
  1043                           
  1044                           ;kbd4x4.c: 17:     TRISDbits.TRISD3 = 1;
  1045   000DF6  8695               	bsf	149,3,c	;volatile
  1046                           
  1047                           ;kbd4x4.c: 18:     TRISDbits.TRISD2 = 1;
  1048   000DF8  8495               	bsf	149,2,c	;volatile
  1049                           
  1050                           ;kbd4x4.c: 19:     TRISDbits.TRISD1 = 1;
  1051   000DFA  8295               	bsf	149,1,c	;volatile
  1052   000DFC  0012               	return		;funcret
  1053   000DFE                     __end_of_Keypad_Init:
  1054                           	callstack 0
  1055                           
  1056 ;; *************** function _Keypad_Get_Char *****************
  1057 ;; Defined at:
  1058 ;;		line 23 in file "kbd4x4.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;		None
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;		None
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      unsigned char 
  1065 ;; Registers used:
  1066 ;;		wreg
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1072 ;;      Params:         0       0       0       0       0       0       0       0       0
  1073 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1074 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1075 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1076 ;;Total ram usage:        1 bytes
  1077 ;; Hardware stack levels used: 1
  1078 ;; This function calls:
  1079 ;;		Nothing
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text9
  1086   00080A                     __ptext9:
  1087                           	callstack 0
  1088   00080A                     _Keypad_Get_Char:
  1089                           	callstack 30
  1090   00080A                     
  1091                           ;kbd4x4.c: 25:     PORTDbits.RD7 = 0;
  1092   00080A  9E83               	bcf	131,7,c	;volatile
  1093                           
  1094                           ;kbd4x4.c: 26:     PORTDbits.RD6 = 1;
  1095   00080C  8C83               	bsf	131,6,c	;volatile
  1096                           
  1097                           ;kbd4x4.c: 27:     PORTDbits.RD5 = 1;
  1098   00080E  8A83               	bsf	131,5,c	;volatile
  1099                           
  1100                           ;kbd4x4.c: 28:     PORTDbits.RD4 = 1;
  1101   000810  8883               	bsf	131,4,c	;volatile
  1102                           
  1103                           ;kbd4x4.c: 29:     if(PORTDbits.RD3 == 0){
  1104   000812  B683               	btfsc	131,3,c	;volatile
  1105   000814  EF0E  F004         	goto	u101
  1106   000818  EF10  F004         	goto	u100
  1107   00081C                     u101:
  1108   00081C  EF29  F004         	goto	l37
  1109   000820                     u100:
  1110   000820                     
  1111                           ;kbd4x4.c: 30:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1112   000820  0E20               	movlw	32
  1113   000822  6E01               	movwf	??_Keypad_Get_Char^0,c
  1114   000824  0E2A               	movlw	42
  1115   000826                     u557:
  1116   000826  2EE8               	decfsz	wreg,f,c
  1117   000828  D7FE               	bra	u557
  1118   00082A  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1119   00082C  D7FC               	bra	u557
  1120   00082E                     l38:
  1121   00082E  A683               	btfss	131,3,c	;volatile
  1122   000830  EF1C  F004         	goto	u111
  1123   000834  EF1E  F004         	goto	u110
  1124   000838                     u111:
  1125   000838  EF17  F004         	goto	l38
  1126   00083C                     u110:
  1127   00083C                     
  1128                           ;kbd4x4.c: 32:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1129   00083C  0E4E               	movlw	78
  1130   00083E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1131   000840  0EEB               	movlw	235
  1132   000842                     u567:
  1133   000842  2EE8               	decfsz	wreg,f,c
  1134   000844  D7FE               	bra	u567
  1135   000846  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1136   000848  D7FC               	bra	u567
  1137   00084A  F000               	nop	
  1138                           
  1139                           ;kbd4x4.c: 33:         return '1';
  1140   00084C  0E31               	movlw	49
  1141   00084E  EF96  F005         	goto	l41
  1142   000852                     l37:
  1143                           
  1144                           ;kbd4x4.c: 35:     if(PORTDbits.RD2 == 0){
  1145   000852  B483               	btfsc	131,2,c	;volatile
  1146   000854  EF2E  F004         	goto	u121
  1147   000858  EF30  F004         	goto	u120
  1148   00085C                     u121:
  1149   00085C  EF49  F004         	goto	l42
  1150   000860                     u120:
  1151   000860                     
  1152                           ;kbd4x4.c: 36:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1153   000860  0E20               	movlw	32
  1154   000862  6E01               	movwf	??_Keypad_Get_Char^0,c
  1155   000864  0E2A               	movlw	42
  1156   000866                     u577:
  1157   000866  2EE8               	decfsz	wreg,f,c
  1158   000868  D7FE               	bra	u577
  1159   00086A  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1160   00086C  D7FC               	bra	u577
  1161   00086E                     l43:
  1162   00086E  A483               	btfss	131,2,c	;volatile
  1163   000870  EF3C  F004         	goto	u131
  1164   000874  EF3E  F004         	goto	u130
  1165   000878                     u131:
  1166   000878  EF37  F004         	goto	l43
  1167   00087C                     u130:
  1168   00087C                     
  1169                           ;kbd4x4.c: 38:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1170   00087C  0E4E               	movlw	78
  1171   00087E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1172   000880  0EEB               	movlw	235
  1173   000882                     u587:
  1174   000882  2EE8               	decfsz	wreg,f,c
  1175   000884  D7FE               	bra	u587
  1176   000886  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1177   000888  D7FC               	bra	u587
  1178   00088A  F000               	nop	
  1179                           
  1180                           ;kbd4x4.c: 39:         return '2';
  1181   00088C  0E32               	movlw	50
  1182   00088E  EF96  F005         	goto	l41
  1183   000892                     l42:
  1184                           
  1185                           ;kbd4x4.c: 41:     if(PORTDbits.RD1 == 0){
  1186   000892  B283               	btfsc	131,1,c	;volatile
  1187   000894  EF4E  F004         	goto	u141
  1188   000898  EF50  F004         	goto	u140
  1189   00089C                     u141:
  1190   00089C  EF69  F004         	goto	l46
  1191   0008A0                     u140:
  1192   0008A0                     
  1193                           ;kbd4x4.c: 42:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1194   0008A0  0E20               	movlw	32
  1195   0008A2  6E01               	movwf	??_Keypad_Get_Char^0,c
  1196   0008A4  0E2A               	movlw	42
  1197   0008A6                     u597:
  1198   0008A6  2EE8               	decfsz	wreg,f,c
  1199   0008A8  D7FE               	bra	u597
  1200   0008AA  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1201   0008AC  D7FC               	bra	u597
  1202   0008AE                     l47:
  1203   0008AE  A283               	btfss	131,1,c	;volatile
  1204   0008B0  EF5C  F004         	goto	u151
  1205   0008B4  EF5E  F004         	goto	u150
  1206   0008B8                     u151:
  1207   0008B8  EF57  F004         	goto	l47
  1208   0008BC                     u150:
  1209   0008BC                     
  1210                           ;kbd4x4.c: 44:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1211   0008BC  0E4E               	movlw	78
  1212   0008BE  6E01               	movwf	??_Keypad_Get_Char^0,c
  1213   0008C0  0EEB               	movlw	235
  1214   0008C2                     u607:
  1215   0008C2  2EE8               	decfsz	wreg,f,c
  1216   0008C4  D7FE               	bra	u607
  1217   0008C6  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1218   0008C8  D7FC               	bra	u607
  1219   0008CA  F000               	nop	
  1220                           
  1221                           ;kbd4x4.c: 45:         return '3';
  1222   0008CC  0E33               	movlw	51
  1223   0008CE  EF96  F005         	goto	l41
  1224   0008D2                     l46:
  1225                           
  1226                           ;kbd4x4.c: 54:     PORTDbits.RD7 = 1;
  1227   0008D2  8E83               	bsf	131,7,c	;volatile
  1228                           
  1229                           ;kbd4x4.c: 55:     PORTDbits.RD6 = 0;
  1230   0008D4  9C83               	bcf	131,6,c	;volatile
  1231                           
  1232                           ;kbd4x4.c: 56:     PORTDbits.RD5 = 1;
  1233   0008D6  8A83               	bsf	131,5,c	;volatile
  1234                           
  1235                           ;kbd4x4.c: 57:     PORTDbits.RD4 = 1;
  1236   0008D8  8883               	bsf	131,4,c	;volatile
  1237                           
  1238                           ;kbd4x4.c: 58:     if(PORTDbits.RD3 == 0){
  1239   0008DA  B683               	btfsc	131,3,c	;volatile
  1240   0008DC  EF72  F004         	goto	u161
  1241   0008E0  EF74  F004         	goto	u160
  1242   0008E4                     u161:
  1243   0008E4  EF8D  F004         	goto	l50
  1244   0008E8                     u160:
  1245   0008E8                     
  1246                           ;kbd4x4.c: 59:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1247   0008E8  0E20               	movlw	32
  1248   0008EA  6E01               	movwf	??_Keypad_Get_Char^0,c
  1249   0008EC  0E2A               	movlw	42
  1250   0008EE                     u617:
  1251   0008EE  2EE8               	decfsz	wreg,f,c
  1252   0008F0  D7FE               	bra	u617
  1253   0008F2  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1254   0008F4  D7FC               	bra	u617
  1255   0008F6                     l51:
  1256   0008F6  A683               	btfss	131,3,c	;volatile
  1257   0008F8  EF80  F004         	goto	u171
  1258   0008FC  EF82  F004         	goto	u170
  1259   000900                     u171:
  1260   000900  EF7B  F004         	goto	l51
  1261   000904                     u170:
  1262   000904                     
  1263                           ;kbd4x4.c: 61:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1264   000904  0E4E               	movlw	78
  1265   000906  6E01               	movwf	??_Keypad_Get_Char^0,c
  1266   000908  0EEB               	movlw	235
  1267   00090A                     u627:
  1268   00090A  2EE8               	decfsz	wreg,f,c
  1269   00090C  D7FE               	bra	u627
  1270   00090E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1271   000910  D7FC               	bra	u627
  1272   000912  F000               	nop	
  1273                           
  1274                           ;kbd4x4.c: 62:         return '4';
  1275   000914  0E34               	movlw	52
  1276   000916  EF96  F005         	goto	l41
  1277   00091A                     l50:
  1278                           
  1279                           ;kbd4x4.c: 64:     if(PORTDbits.RD2 == 0){
  1280   00091A  B483               	btfsc	131,2,c	;volatile
  1281   00091C  EF92  F004         	goto	u181
  1282   000920  EF94  F004         	goto	u180
  1283   000924                     u181:
  1284   000924  EFAD  F004         	goto	l54
  1285   000928                     u180:
  1286   000928                     
  1287                           ;kbd4x4.c: 65:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1288   000928  0E20               	movlw	32
  1289   00092A  6E01               	movwf	??_Keypad_Get_Char^0,c
  1290   00092C  0E2A               	movlw	42
  1291   00092E                     u637:
  1292   00092E  2EE8               	decfsz	wreg,f,c
  1293   000930  D7FE               	bra	u637
  1294   000932  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1295   000934  D7FC               	bra	u637
  1296   000936                     l55:
  1297   000936  A483               	btfss	131,2,c	;volatile
  1298   000938  EFA0  F004         	goto	u191
  1299   00093C  EFA2  F004         	goto	u190
  1300   000940                     u191:
  1301   000940  EF9B  F004         	goto	l55
  1302   000944                     u190:
  1303   000944                     
  1304                           ;kbd4x4.c: 67:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1305   000944  0E4E               	movlw	78
  1306   000946  6E01               	movwf	??_Keypad_Get_Char^0,c
  1307   000948  0EEB               	movlw	235
  1308   00094A                     u647:
  1309   00094A  2EE8               	decfsz	wreg,f,c
  1310   00094C  D7FE               	bra	u647
  1311   00094E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1312   000950  D7FC               	bra	u647
  1313   000952  F000               	nop	
  1314                           
  1315                           ;kbd4x4.c: 68:         return '5';
  1316   000954  0E35               	movlw	53
  1317   000956  EF96  F005         	goto	l41
  1318   00095A                     l54:
  1319                           
  1320                           ;kbd4x4.c: 70:     if(PORTDbits.RD1 == 0){
  1321   00095A  B283               	btfsc	131,1,c	;volatile
  1322   00095C  EFB2  F004         	goto	u201
  1323   000960  EFB4  F004         	goto	u200
  1324   000964                     u201:
  1325   000964  EFCD  F004         	goto	l58
  1326   000968                     u200:
  1327   000968                     
  1328                           ;kbd4x4.c: 71:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1329   000968  0E20               	movlw	32
  1330   00096A  6E01               	movwf	??_Keypad_Get_Char^0,c
  1331   00096C  0E2A               	movlw	42
  1332   00096E                     u657:
  1333   00096E  2EE8               	decfsz	wreg,f,c
  1334   000970  D7FE               	bra	u657
  1335   000972  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1336   000974  D7FC               	bra	u657
  1337   000976                     l59:
  1338   000976  A283               	btfss	131,1,c	;volatile
  1339   000978  EFC0  F004         	goto	u211
  1340   00097C  EFC2  F004         	goto	u210
  1341   000980                     u211:
  1342   000980  EFBB  F004         	goto	l59
  1343   000984                     u210:
  1344   000984                     
  1345                           ;kbd4x4.c: 73:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1346   000984  0E4E               	movlw	78
  1347   000986  6E01               	movwf	??_Keypad_Get_Char^0,c
  1348   000988  0EEB               	movlw	235
  1349   00098A                     u667:
  1350   00098A  2EE8               	decfsz	wreg,f,c
  1351   00098C  D7FE               	bra	u667
  1352   00098E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1353   000990  D7FC               	bra	u667
  1354   000992  F000               	nop	
  1355                           
  1356                           ;kbd4x4.c: 74:         return '6';
  1357   000994  0E36               	movlw	54
  1358   000996  EF96  F005         	goto	l41
  1359   00099A                     l58:
  1360                           
  1361                           ;kbd4x4.c: 83:     PORTDbits.RD7 = 1;
  1362   00099A  8E83               	bsf	131,7,c	;volatile
  1363                           
  1364                           ;kbd4x4.c: 84:     PORTDbits.RD6 = 1;
  1365   00099C  8C83               	bsf	131,6,c	;volatile
  1366                           
  1367                           ;kbd4x4.c: 85:     PORTDbits.RD5 = 0;
  1368   00099E  9A83               	bcf	131,5,c	;volatile
  1369                           
  1370                           ;kbd4x4.c: 86:     PORTDbits.RD4 = 1;
  1371   0009A0  8883               	bsf	131,4,c	;volatile
  1372                           
  1373                           ;kbd4x4.c: 87:     if(PORTDbits.RD3 == 0){
  1374   0009A2  B683               	btfsc	131,3,c	;volatile
  1375   0009A4  EFD6  F004         	goto	u221
  1376   0009A8  EFD8  F004         	goto	u220
  1377   0009AC                     u221:
  1378   0009AC  EFF1  F004         	goto	l62
  1379   0009B0                     u220:
  1380   0009B0                     
  1381                           ;kbd4x4.c: 88:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1382   0009B0  0E20               	movlw	32
  1383   0009B2  6E01               	movwf	??_Keypad_Get_Char^0,c
  1384   0009B4  0E2A               	movlw	42
  1385   0009B6                     u677:
  1386   0009B6  2EE8               	decfsz	wreg,f,c
  1387   0009B8  D7FE               	bra	u677
  1388   0009BA  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1389   0009BC  D7FC               	bra	u677
  1390   0009BE                     l63:
  1391   0009BE  A683               	btfss	131,3,c	;volatile
  1392   0009C0  EFE4  F004         	goto	u231
  1393   0009C4  EFE6  F004         	goto	u230
  1394   0009C8                     u231:
  1395   0009C8  EFDF  F004         	goto	l63
  1396   0009CC                     u230:
  1397   0009CC                     
  1398                           ;kbd4x4.c: 90:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1399   0009CC  0E4E               	movlw	78
  1400   0009CE  6E01               	movwf	??_Keypad_Get_Char^0,c
  1401   0009D0  0EEB               	movlw	235
  1402   0009D2                     u687:
  1403   0009D2  2EE8               	decfsz	wreg,f,c
  1404   0009D4  D7FE               	bra	u687
  1405   0009D6  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1406   0009D8  D7FC               	bra	u687
  1407   0009DA  F000               	nop	
  1408                           
  1409                           ;kbd4x4.c: 91:         return '7';
  1410   0009DC  0E37               	movlw	55
  1411   0009DE  EF96  F005         	goto	l41
  1412   0009E2                     l62:
  1413                           
  1414                           ;kbd4x4.c: 93:     if(PORTDbits.RD2 == 0){
  1415   0009E2  B483               	btfsc	131,2,c	;volatile
  1416   0009E4  EFF6  F004         	goto	u241
  1417   0009E8  EFF8  F004         	goto	u240
  1418   0009EC                     u241:
  1419   0009EC  EF11  F005         	goto	l66
  1420   0009F0                     u240:
  1421   0009F0                     
  1422                           ;kbd4x4.c: 94:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1423   0009F0  0E20               	movlw	32
  1424   0009F2  6E01               	movwf	??_Keypad_Get_Char^0,c
  1425   0009F4  0E2A               	movlw	42
  1426   0009F6                     u697:
  1427   0009F6  2EE8               	decfsz	wreg,f,c
  1428   0009F8  D7FE               	bra	u697
  1429   0009FA  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1430   0009FC  D7FC               	bra	u697
  1431   0009FE                     l67:
  1432   0009FE  A483               	btfss	131,2,c	;volatile
  1433   000A00  EF04  F005         	goto	u251
  1434   000A04  EF06  F005         	goto	u250
  1435   000A08                     u251:
  1436   000A08  EFFF  F004         	goto	l67
  1437   000A0C                     u250:
  1438   000A0C                     
  1439                           ;kbd4x4.c: 96:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1440   000A0C  0E4E               	movlw	78
  1441   000A0E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1442   000A10  0EEB               	movlw	235
  1443   000A12                     u707:
  1444   000A12  2EE8               	decfsz	wreg,f,c
  1445   000A14  D7FE               	bra	u707
  1446   000A16  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1447   000A18  D7FC               	bra	u707
  1448   000A1A  F000               	nop	
  1449                           
  1450                           ;kbd4x4.c: 97:         return '8';
  1451   000A1C  0E38               	movlw	56
  1452   000A1E  EF96  F005         	goto	l41
  1453   000A22                     l66:
  1454                           
  1455                           ;kbd4x4.c: 99:     if(PORTDbits.RD1 == 0){
  1456   000A22  B283               	btfsc	131,1,c	;volatile
  1457   000A24  EF16  F005         	goto	u261
  1458   000A28  EF18  F005         	goto	u260
  1459   000A2C                     u261:
  1460   000A2C  EF31  F005         	goto	l70
  1461   000A30                     u260:
  1462   000A30                     
  1463                           ;kbd4x4.c: 100:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1464   000A30  0E20               	movlw	32
  1465   000A32  6E01               	movwf	??_Keypad_Get_Char^0,c
  1466   000A34  0E2A               	movlw	42
  1467   000A36                     u717:
  1468   000A36  2EE8               	decfsz	wreg,f,c
  1469   000A38  D7FE               	bra	u717
  1470   000A3A  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1471   000A3C  D7FC               	bra	u717
  1472   000A3E                     l71:
  1473   000A3E  A283               	btfss	131,1,c	;volatile
  1474   000A40  EF24  F005         	goto	u271
  1475   000A44  EF26  F005         	goto	u270
  1476   000A48                     u271:
  1477   000A48  EF1F  F005         	goto	l71
  1478   000A4C                     u270:
  1479   000A4C                     
  1480                           ;kbd4x4.c: 102:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1481   000A4C  0E4E               	movlw	78
  1482   000A4E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1483   000A50  0EEB               	movlw	235
  1484   000A52                     u727:
  1485   000A52  2EE8               	decfsz	wreg,f,c
  1486   000A54  D7FE               	bra	u727
  1487   000A56  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1488   000A58  D7FC               	bra	u727
  1489   000A5A  F000               	nop	
  1490                           
  1491                           ;kbd4x4.c: 103:         return '9';
  1492   000A5C  0E39               	movlw	57
  1493   000A5E  EF96  F005         	goto	l41
  1494   000A62                     l70:
  1495                           
  1496                           ;kbd4x4.c: 112:     PORTDbits.RD7 = 1;
  1497   000A62  8E83               	bsf	131,7,c	;volatile
  1498                           
  1499                           ;kbd4x4.c: 113:     PORTDbits.RD6 = 1;
  1500   000A64  8C83               	bsf	131,6,c	;volatile
  1501                           
  1502                           ;kbd4x4.c: 114:     PORTDbits.RD5 = 1;
  1503   000A66  8A83               	bsf	131,5,c	;volatile
  1504                           
  1505                           ;kbd4x4.c: 115:     PORTDbits.RD4 = 0;
  1506   000A68  9883               	bcf	131,4,c	;volatile
  1507                           
  1508                           ;kbd4x4.c: 116:     if(PORTDbits.RD3 == 0){
  1509   000A6A  B683               	btfsc	131,3,c	;volatile
  1510   000A6C  EF3A  F005         	goto	u281
  1511   000A70  EF3C  F005         	goto	u280
  1512   000A74                     u281:
  1513   000A74  EF55  F005         	goto	l74
  1514   000A78                     u280:
  1515   000A78                     
  1516                           ;kbd4x4.c: 117:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1517   000A78  0E20               	movlw	32
  1518   000A7A  6E01               	movwf	??_Keypad_Get_Char^0,c
  1519   000A7C  0E2A               	movlw	42
  1520   000A7E                     u737:
  1521   000A7E  2EE8               	decfsz	wreg,f,c
  1522   000A80  D7FE               	bra	u737
  1523   000A82  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1524   000A84  D7FC               	bra	u737
  1525   000A86                     l75:
  1526   000A86  A683               	btfss	131,3,c	;volatile
  1527   000A88  EF48  F005         	goto	u291
  1528   000A8C  EF4A  F005         	goto	u290
  1529   000A90                     u291:
  1530   000A90  EF43  F005         	goto	l75
  1531   000A94                     u290:
  1532   000A94                     
  1533                           ;kbd4x4.c: 119:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1534   000A94  0E4E               	movlw	78
  1535   000A96  6E01               	movwf	??_Keypad_Get_Char^0,c
  1536   000A98  0EEB               	movlw	235
  1537   000A9A                     u747:
  1538   000A9A  2EE8               	decfsz	wreg,f,c
  1539   000A9C  D7FE               	bra	u747
  1540   000A9E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1541   000AA0  D7FC               	bra	u747
  1542   000AA2  F000               	nop	
  1543                           
  1544                           ;kbd4x4.c: 120:         return '*';
  1545   000AA4  0E2A               	movlw	42
  1546   000AA6  EF96  F005         	goto	l41
  1547   000AAA                     l74:
  1548                           
  1549                           ;kbd4x4.c: 122:     if(PORTDbits.RD2 == 0){
  1550   000AAA  B483               	btfsc	131,2,c	;volatile
  1551   000AAC  EF5A  F005         	goto	u301
  1552   000AB0  EF5C  F005         	goto	u300
  1553   000AB4                     u301:
  1554   000AB4  EF75  F005         	goto	l78
  1555   000AB8                     u300:
  1556   000AB8                     
  1557                           ;kbd4x4.c: 123:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1558   000AB8  0E20               	movlw	32
  1559   000ABA  6E01               	movwf	??_Keypad_Get_Char^0,c
  1560   000ABC  0E2A               	movlw	42
  1561   000ABE                     u757:
  1562   000ABE  2EE8               	decfsz	wreg,f,c
  1563   000AC0  D7FE               	bra	u757
  1564   000AC2  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1565   000AC4  D7FC               	bra	u757
  1566   000AC6                     l79:
  1567   000AC6  A483               	btfss	131,2,c	;volatile
  1568   000AC8  EF68  F005         	goto	u311
  1569   000ACC  EF6A  F005         	goto	u310
  1570   000AD0                     u311:
  1571   000AD0  EF63  F005         	goto	l79
  1572   000AD4                     u310:
  1573   000AD4                     
  1574                           ;kbd4x4.c: 125:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1575   000AD4  0E4E               	movlw	78
  1576   000AD6  6E01               	movwf	??_Keypad_Get_Char^0,c
  1577   000AD8  0EEB               	movlw	235
  1578   000ADA                     u767:
  1579   000ADA  2EE8               	decfsz	wreg,f,c
  1580   000ADC  D7FE               	bra	u767
  1581   000ADE  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1582   000AE0  D7FC               	bra	u767
  1583   000AE2  F000               	nop	
  1584                           
  1585                           ;kbd4x4.c: 126:         return '0';
  1586   000AE4  0E30               	movlw	48
  1587   000AE6  EF96  F005         	goto	l41
  1588   000AEA                     l78:
  1589                           
  1590                           ;kbd4x4.c: 128:     if(PORTDbits.RD1 == 0){
  1591   000AEA  B283               	btfsc	131,1,c	;volatile
  1592   000AEC  EF7A  F005         	goto	u321
  1593   000AF0  EF7C  F005         	goto	u320
  1594   000AF4                     u321:
  1595   000AF4  EF95  F005         	goto	l1057
  1596   000AF8                     u320:
  1597   000AF8                     
  1598                           ;kbd4x4.c: 129:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1599   000AF8  0E20               	movlw	32
  1600   000AFA  6E01               	movwf	??_Keypad_Get_Char^0,c
  1601   000AFC  0E2A               	movlw	42
  1602   000AFE                     u777:
  1603   000AFE  2EE8               	decfsz	wreg,f,c
  1604   000B00  D7FE               	bra	u777
  1605   000B02  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1606   000B04  D7FC               	bra	u777
  1607   000B06                     l83:
  1608   000B06  A283               	btfss	131,1,c	;volatile
  1609   000B08  EF88  F005         	goto	u331
  1610   000B0C  EF8A  F005         	goto	u330
  1611   000B10                     u331:
  1612   000B10  EF83  F005         	goto	l83
  1613   000B14                     u330:
  1614   000B14                     
  1615                           ;kbd4x4.c: 131:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1616   000B14  0E4E               	movlw	78
  1617   000B16  6E01               	movwf	??_Keypad_Get_Char^0,c
  1618   000B18  0EEB               	movlw	235
  1619   000B1A                     u787:
  1620   000B1A  2EE8               	decfsz	wreg,f,c
  1621   000B1C  D7FE               	bra	u787
  1622   000B1E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1623   000B20  D7FC               	bra	u787
  1624   000B22  F000               	nop	
  1625                           
  1626                           ;kbd4x4.c: 132:         return '#';
  1627   000B24  0E23               	movlw	35
  1628   000B26  EF96  F005         	goto	l41
  1629   000B2A                     l1057:
  1630                           
  1631                           ;kbd4x4.c: 140:     return 0;
  1632   000B2A  0E00               	movlw	0
  1633   000B2C                     l41:
  1634   000B2C  0012               	return		;funcret
  1635   000B2E                     __end_of_Keypad_Get_Char:
  1636                           	callstack 0
  1637                           
  1638                           	psect	rparam
  1639   000000                     
  1640                           	psect	idloc
  1641                           
  1642                           ;Config register IDLOC0 @ 0x200000
  1643                           ;	unspecified, using default values
  1644   200000                     	org	2097152
  1645   200000  FF                 	db	255
  1646                           
  1647                           ;Config register IDLOC1 @ 0x200001
  1648                           ;	unspecified, using default values
  1649   200001                     	org	2097153
  1650   200001  FF                 	db	255
  1651                           
  1652                           ;Config register IDLOC2 @ 0x200002
  1653                           ;	unspecified, using default values
  1654   200002                     	org	2097154
  1655   200002  FF                 	db	255
  1656                           
  1657                           ;Config register IDLOC3 @ 0x200003
  1658                           ;	unspecified, using default values
  1659   200003                     	org	2097155
  1660   200003  FF                 	db	255
  1661                           
  1662                           ;Config register IDLOC4 @ 0x200004
  1663                           ;	unspecified, using default values
  1664   200004                     	org	2097156
  1665   200004  FF                 	db	255
  1666                           
  1667                           ;Config register IDLOC5 @ 0x200005
  1668                           ;	unspecified, using default values
  1669   200005                     	org	2097157
  1670   200005  FF                 	db	255
  1671                           
  1672                           ;Config register IDLOC6 @ 0x200006
  1673                           ;	unspecified, using default values
  1674   200006                     	org	2097158
  1675   200006  FF                 	db	255
  1676                           
  1677                           ;Config register IDLOC7 @ 0x200007
  1678                           ;	unspecified, using default values
  1679   200007                     	org	2097159
  1680   200007  FF                 	db	255
  1681                           
  1682                           	psect	config
  1683                           
  1684                           ;Config register CONFIG1L @ 0x300000
  1685                           ;	unspecified, using default values
  1686                           ;	PLL Prescaler Selection bits
  1687                           ;	PLLDIV = 0x0, unprogrammed default
  1688                           ;	System Clock Postscaler Selection bits
  1689                           ;	CPUDIV = 0x0, unprogrammed default
  1690                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1691                           ;	USBDIV = 0x0, unprogrammed default
  1692   300000                     	org	3145728
  1693   300000  00                 	db	0
  1694                           
  1695                           ;Config register CONFIG1H @ 0x300001
  1696                           ;	unspecified, using default values
  1697                           ;	Oscillator Selection bits
  1698                           ;	FOSC = 0x5, unprogrammed default
  1699                           ;	Fail-Safe Clock Monitor Enable bit
  1700                           ;	FCMEN = 0x0, unprogrammed default
  1701                           ;	Internal/External Oscillator Switchover bit
  1702                           ;	IESO = 0x0, unprogrammed default
  1703   300001                     	org	3145729
  1704   300001  05                 	db	5
  1705                           
  1706                           ;Config register CONFIG2L @ 0x300002
  1707                           ;	unspecified, using default values
  1708                           ;	Power-up Timer Enable bit
  1709                           ;	PWRT = 0x1, unprogrammed default
  1710                           ;	Brown-out Reset Enable bits
  1711                           ;	BOR = 0x3, unprogrammed default
  1712                           ;	Brown-out Reset Voltage bits
  1713                           ;	BORV = 0x3, unprogrammed default
  1714                           ;	USB Voltage Regulator Enable bit
  1715                           ;	VREGEN = 0x0, unprogrammed default
  1716   300002                     	org	3145730
  1717   300002  1F                 	db	31
  1718                           
  1719                           ;Config register CONFIG2H @ 0x300003
  1720                           ;	unspecified, using default values
  1721                           ;	Watchdog Timer Enable bit
  1722                           ;	WDT = 0x1, unprogrammed default
  1723                           ;	Watchdog Timer Postscale Select bits
  1724                           ;	WDTPS = 0xF, unprogrammed default
  1725   300003                     	org	3145731
  1726   300003  1F                 	db	31
  1727                           
  1728                           ; Padding undefined space
  1729   300004                     	org	3145732
  1730   300004  FF                 	db	255
  1731                           
  1732                           ;Config register CONFIG3H @ 0x300005
  1733                           ;	unspecified, using default values
  1734                           ;	CCP2 MUX bit
  1735                           ;	CCP2MX = 0x1, unprogrammed default
  1736                           ;	PORTB A/D Enable bit
  1737                           ;	PBADEN = 0x1, unprogrammed default
  1738                           ;	Low-Power Timer 1 Oscillator Enable bit
  1739                           ;	LPT1OSC = 0x0, unprogrammed default
  1740                           ;	MCLR Pin Enable bit
  1741                           ;	MCLRE = 0x1, unprogrammed default
  1742   300005                     	org	3145733
  1743   300005  83                 	db	131
  1744                           
  1745                           ;Config register CONFIG4L @ 0x300006
  1746                           ;	unspecified, using default values
  1747                           ;	Stack Full/Underflow Reset Enable bit
  1748                           ;	STVREN = 0x1, unprogrammed default
  1749                           ;	Single-Supply ICSP Enable bit
  1750                           ;	LVP = 0x1, unprogrammed default
  1751                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1752                           ;	ICPRT = 0x0, unprogrammed default
  1753                           ;	Extended Instruction Set Enable bit
  1754                           ;	XINST = 0x0, unprogrammed default
  1755                           ;	Background Debugger Enable bit
  1756                           ;	DEBUG = 0x1, unprogrammed default
  1757   300006                     	org	3145734
  1758   300006  85                 	db	133
  1759                           
  1760                           ; Padding undefined space
  1761   300007                     	org	3145735
  1762   300007  FF                 	db	255
  1763                           
  1764                           ;Config register CONFIG5L @ 0x300008
  1765                           ;	unspecified, using default values
  1766                           ;	Code Protection bit
  1767                           ;	CP0 = 0x1, unprogrammed default
  1768                           ;	Code Protection bit
  1769                           ;	CP1 = 0x1, unprogrammed default
  1770                           ;	Code Protection bit
  1771                           ;	CP2 = 0x1, unprogrammed default
  1772                           ;	Code Protection bit
  1773                           ;	CP3 = 0x1, unprogrammed default
  1774   300008                     	org	3145736
  1775   300008  0F                 	db	15
  1776                           
  1777                           ;Config register CONFIG5H @ 0x300009
  1778                           ;	unspecified, using default values
  1779                           ;	Boot Block Code Protection bit
  1780                           ;	CPB = 0x1, unprogrammed default
  1781                           ;	Data EEPROM Code Protection bit
  1782                           ;	CPD = 0x1, unprogrammed default
  1783   300009                     	org	3145737
  1784   300009  C0                 	db	192
  1785                           
  1786                           ;Config register CONFIG6L @ 0x30000A
  1787                           ;	unspecified, using default values
  1788                           ;	Write Protection bit
  1789                           ;	WRT0 = 0x1, unprogrammed default
  1790                           ;	Write Protection bit
  1791                           ;	WRT1 = 0x1, unprogrammed default
  1792                           ;	Write Protection bit
  1793                           ;	WRT2 = 0x1, unprogrammed default
  1794                           ;	Write Protection bit
  1795                           ;	WRT3 = 0x1, unprogrammed default
  1796   30000A                     	org	3145738
  1797   30000A  0F                 	db	15
  1798                           
  1799                           ;Config register CONFIG6H @ 0x30000B
  1800                           ;	unspecified, using default values
  1801                           ;	Configuration Register Write Protection bit
  1802                           ;	WRTC = 0x1, unprogrammed default
  1803                           ;	Boot Block Write Protection bit
  1804                           ;	WRTB = 0x1, unprogrammed default
  1805                           ;	Data EEPROM Write Protection bit
  1806                           ;	WRTD = 0x1, unprogrammed default
  1807   30000B                     	org	3145739
  1808   30000B  E0                 	db	224
  1809                           
  1810                           ;Config register CONFIG7L @ 0x30000C
  1811                           ;	unspecified, using default values
  1812                           ;	Table Read Protection bit
  1813                           ;	EBTR0 = 0x1, unprogrammed default
  1814                           ;	Table Read Protection bit
  1815                           ;	EBTR1 = 0x1, unprogrammed default
  1816                           ;	Table Read Protection bit
  1817                           ;	EBTR2 = 0x1, unprogrammed default
  1818                           ;	Table Read Protection bit
  1819                           ;	EBTR3 = 0x1, unprogrammed default
  1820   30000C                     	org	3145740
  1821   30000C  0F                 	db	15
  1822                           
  1823                           ;Config register CONFIG7H @ 0x30000D
  1824                           ;	unspecified, using default values
  1825                           ;	Boot Block Table Read Protection bit
  1826                           ;	EBTRB = 0x1, unprogrammed default
  1827   30000D                     	org	3145741
  1828   30000D  40                 	db	64
  1829                           tosu	equ	0xFFF
  1830                           tosh	equ	0xFFE
  1831                           tosl	equ	0xFFD
  1832                           stkptr	equ	0xFFC
  1833                           pclatu	equ	0xFFB
  1834                           pclath	equ	0xFFA
  1835                           pcl	equ	0xFF9
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           prodh	equ	0xFF4
  1841                           prodl	equ	0xFF3
  1842                           indf0	equ	0xFEF
  1843                           postinc0	equ	0xFEE
  1844                           postdec0	equ	0xFED
  1845                           preinc0	equ	0xFEC
  1846                           plusw0	equ	0xFEB
  1847                           fsr0h	equ	0xFEA
  1848                           fsr0l	equ	0xFE9
  1849                           wreg	equ	0xFE8
  1850                           indf1	equ	0xFE7
  1851                           postinc1	equ	0xFE6
  1852                           postdec1	equ	0xFE5
  1853                           preinc1	equ	0xFE4
  1854                           plusw1	equ	0xFE3
  1855                           fsr1h	equ	0xFE2
  1856                           fsr1l	equ	0xFE1
  1857                           bsr	equ	0xFE0
  1858                           indf2	equ	0xFDF
  1859                           postinc2	equ	0xFDE
  1860                           postdec2	equ	0xFDD
  1861                           preinc2	equ	0xFDC
  1862                           plusw2	equ	0xFDB
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8

Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1459
                    _Keypad_Get_Char
                        _Keypad_Init
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     362
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     767
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     210
                                              3 COMRAM     2     2      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Get_Char                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keypad_Get_Char
   _Keypad_Init
   _Lcd_Init
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      A       B       1       11.6%
BITBIGSFRh          3E      0       0      21        0.0%
BITBIGSFRlh         2B      0       0      22        0.0%
BITBIGSFRlll        23      0       0      25        0.0%
BITBIGSFRllhh        8      0       0      23        0.0%
BITBIGSFRllhl        8      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       B       3        0.0%
DATA                 0      0       B       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Jul 15 20:48:37 2023

                      l41 0B2C                        l50 091A                        l42 0892  
                      l34 0DFC                        l51 08F6                        l43 086E  
                      l37 0852                        l70 0A62                        l62 09E2  
                      l54 095A                        l46 08D2                        l38 082E  
                      l71 0A3E                        l63 09BE                        l55 0936  
                      l47 08AE                        l74 0AAA                        l66 0A22  
                      l58 099A                        l83 0B06                        l75 0A86  
                      l67 09FE                        l59 0976                        l78 0AEA  
                      l79 0AC6                        l95 0CFE                        l99 0D14  
                      u10 0CF8                        u11 0CF4                        u20 0D0E  
                      u21 0D0A                        u30 0D24                        u31 0D20  
                      u40 0D3A                        u41 0D36                       l110 0D42  
                     l103 0D2A                       l113 0DEC                       l122 0BFE  
                     l107 0D40                       l116 0E0A                       l132 0DCC  
                     l126 0BFE                       l129 0C8A                       l138 0D98  
                     l901 0DC2                       l911 0C00                       l903 0DC4  
                     l921 0C40                       l913 0C0C                       l905 0DCA  
                     l907 0DFE                       l931 0C68                       l923 0C46  
                     l915 0C12                       l909 0DEE                       l861 0CEA  
                     l941 0C86                       l933 0C6E                       l925 0C56  
                     l917 0C2A                       l871 0D24                       l863 0CF8  
                     l935 0C74                       l927 0C5C                       l919 0C30  
                     l873 0D2C                       l865 0D00                       l881 0DD8  
                     l937 0C7A                       l929 0C62                       l875 0D3A  
                     l867 0D0E                       l883 0DDA                       l939 0C80  
                     l891 0DAA                       l869 0D16                       l885 0DEA  
                     l877 0DD0                       l893 0DB2                       l991 0860  
                     l983 080A                       l879 0DD2                       l895 0DB4  
                     l887 0D9C                       l993 087C                       l985 0820  
                     l897 0DBA                       l889 0DA8                       l987 083C  
                     l899 0DBC                       l997 08A0                       l999 08BC  
                     u100 0820                       u101 081C                       u110 083C  
                     u111 0838                       u200 0968                       u120 0860  
                     u201 0964                       u121 085C                       u210 0984  
                     u130 087C                       u211 0980                       u131 0878  
                     u300 0AB8                       u220 09B0                       u140 08A0  
                     u301 0AB4                       u221 09AC                       u141 089C  
                     u310 0AD4                       u230 09CC                       u150 08BC  
                     u311 0AD0                       u231 09C8                       u151 08B8  
                     u320 0AF8                       u240 09F0                       u160 08E8  
                     u321 0AF4                       u241 09EC                       u161 08E4  
                     u330 0B14                       u250 0A0C                       u170 0904  
                     u331 0B10                       u251 0A08                       u171 0900  
                     u260 0A30                       u180 0928                       u261 0A2C  
                     u181 0924                       u270 0A4C                       u190 0944  
                     u430 0B40                       u271 0A48                       u191 0940  
                     u431 0B3C                       u280 0A78                       u440 0B74  
                     u281 0A74                       u441 0B70                       u290 0A94  
                     u450 0BA8                       u291 0A90                       u451 0BA4  
                     u507 0DC6                       u460 0BDC                       u517 0C1C  
                     u461 0BD8                       u470 0D98                       u607 08C2  
                     u527 0C36                       u471 0D94                       u480 0CC4  
                     u617 08EE                       u537 0C4C                       u481 0CC0  
                     u707 0A12                       u627 090A                       u547 0DE0  
                     u717 0A36                       u637 092E                       u557 0826  
                     u727 0A52                       u647 094A                       u567 0842  
                     u737 0A7E                       u657 096E                       u577 0866  
                     u497 0DB6                       u747 0A9A                       u667 098A  
                     u587 0882                       u757 0ABE                       u677 09B6  
                     u597 08A6                       u767 0ADA                       u687 09D2  
                     u777 0AFE                       u697 09F6                       u787 0B1A  
                     wreg 000FE8                      l1011 0944                      l1003 08E8  
                    l1021 09B0                      l1005 0904                      l1023 09CC  
                    l1015 0968                      l1041 0A94                      l1033 0A30  
                    l1017 0984                      l1009 0928                      l1201 0B52  
                    l1051 0AF8                      l1035 0A4C                      l1027 09F0  
                    l1211 0B8C                      l1203 0B58                      l1053 0B14  
                    l1045 0AB8                      l1029 0A0C                      l1221 0BCA  
                    l1213 0B96                      l1205 0B62                      l1047 0AD4  
                    l1039 0A78                      l1223 0BDC                      l1215 0BA8  
                    l1207 0B74                      l1231 0D50                      l1057 0B2A  
                    l1225 0BEE                      l1217 0BBA                      l1209 0B86  
                    l1233 0D6C                      l1241 0C98                      l1227 0BF4  
                    l1219 0BC0                      l1235 0D70                      l1251 0CCE  
                    l1243 0CA2                      l1229 0D44                      l1253 0CDA  
                    l1245 0CAE                      l1237 0C8C                      l1247 0CB4  
                    l1239 0C90                      l1249 0CC4                      l1197 0B30  
                    l1199 0B40                      STR_1 0801                      STR_2 0801  
       ?_Lcd_Write_String 0005                      _main 0C8C                      start 0000  
      ??_Lcd_Write_String 0007           __end_of_Lcd_Cmd 0DEE              ___param_bank 000000  
                   ?_main 0001             ??_Keypad_Init 0001                     _tecla 000B  
                   tablat 000FF5                     status 000FD8          __end_of_Lcd_Init 0C8C  
        __end_of_Lcd_Port 0D44           __initialization 0E0C              __end_of_main 0CE8  
                  ??_main 000B             __activetblptr 000002       __end_of_Keypad_Init 0DFE  
               ??_Lcd_Cmd 0002                    isa$std 000001              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
         Lcd_Set_Cursor@a 0005           Lcd_Set_Cursor@b 0004           Lcd_Set_Cursor@y 0007  
         Lcd_Set_Cursor@z 0006                __accesstop 0060   __end_of__initialization 0E0E  
       __end_of_Lcd_Clear 0E0C             ___rparam_used 000001            __pcstackCOMRAM 0001  
          _Lcd_Set_Cursor 0B2E               _Keypad_Init 0DEE                 ?_Lcd_Init 0001  
               ?_Lcd_Port 0001    __end_of_Lcd_Set_Cursor 0C00                ??_Lcd_Init 0004  
              ??_Lcd_Port 0001            _Lcd_Write_Char 0D9A                   _Lcd_Cmd 0DCE  
                 __Hparam 0000                   __Lparam 0000              __psmallconst 0800  
                 __pcinit 0E0C                   __ramtop 0800           ?_Lcd_Set_Cursor 0004  
                 __ptext0 0C8C                   __ptext1 0D44                   __ptext2 0D9A  
                 __ptext3 0B2E                   __ptext4 0C00                   __ptext5 0DFE  
                 __ptext6 0DCE                   __ptext7 0CE8                   __ptext8 0DEE  
                 __ptext9 080A    __end_of_Lcd_Write_Char 0DCE      end_of_initialization 0E0E  
       ??_Keypad_Get_Char 0001             __Lmediumconst 0000                 Lcd_Port@a 0001  
               _PORTDbits 000F83                 _TRISDbits 000F95           ?_Lcd_Write_Char 0001  
       Lcd_Write_String@a 0005         Lcd_Write_String@i 0009                 _Lcd_Clear 0DFE  
        _Lcd_Write_String 0D44              ?_Keypad_Init 0001       start_initialization 0E0C  
              ?_Lcd_Clear 0001           Lcd_Write_Char@a 0004           Lcd_Write_Char@y 0003  
             __pbssCOMRAM 000B                  ?_Lcd_Cmd 0001          ??_Lcd_Set_Cursor 0005  
             __smallconst 0800           _Keypad_Get_Char 080A                  _LATDbits 000F8C  
                Lcd_Cmd@a 0003               ??_Lcd_Clear 0004                _ADCON1bits 000FC1  
        ??_Lcd_Write_Char 0002                  _Lcd_Init 0C00                  _Lcd_Port 0CE8  
__end_of_Lcd_Write_String 0D9A                  __Hrparam 0000                  __Lrparam 0000  
 __end_of_Keypad_Get_Char 0B2E                  isa$xinst 000000        Lcd_Write_Char@temp 0002  
        ?_Keypad_Get_Char 0001        Lcd_Set_Cursor@temp 0008  
